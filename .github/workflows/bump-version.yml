name: Bump Main Version

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Released version to bump from (e.g., 0.2)'
        required: false
        type: string

jobs:
  bump-version:
    # Only run for stable releases (not prereleases) or manual trigger
    if: "!github.event.release.prerelease || github.event_name == 'workflow_dispatch'"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          ref: main
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Configure Git
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version to bump from
        id: get_version
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            if [ -n "${{ inputs.version }}" ]; then
              # Use provided version
              RELEASED_VERSION="${{ inputs.version }}"
            else
              # Get latest tag
              RELEASED_VERSION=$(git describe --tags --abbrev=0 | sed 's/^v//')
            fi
          else
            # From release event
            RELEASED_VERSION="${{ github.event.release.tag_name }}"
            RELEASED_VERSION="${RELEASED_VERSION#v}"
          fi

          echo "released_version=$RELEASED_VERSION" >> $GITHUB_OUTPUT

      - name: Fetch and merge release tag
        run: |
          RELEASED_VERSION="${{ steps.get_version.outputs.released_version }}"

          # Fetch all tags and branches
          git fetch --all --tags

          # Handle both "0.2" and "0.2.0" formats
          if [[ "$RELEASED_VERSION" =~ ^[0-9]+\.[0-9]+$ ]]; then
            # If version is like "0.2", append ".0"
            FULL_VERSION="${RELEASED_VERSION}.0"
          else
            # Already has patch version
            FULL_VERSION="$RELEASED_VERSION"
          fi

          # Check if the tag exists
          if git rev-parse "v$FULL_VERSION" >/dev/null 2>&1; then
            echo "Tag v$FULL_VERSION exists"
            
            # Get the commit hash of the tag
            TAG_COMMIT=$(git rev-list -n 1 v$FULL_VERSION)
            
            # Merge the tag commit into main
            # Using 'ours' strategy to keep main's content but make the tag reachable
            git merge $TAG_COMMIT --strategy=ours --no-edit -m "chore: merge v$FULL_VERSION tag into main [skip ci]"
            
            echo "Merged tag v$FULL_VERSION into main's history"
          else
            echo "Warning: Tag v$FULL_VERSION not found"
            echo "Available tags:"
            git tag -l "v*"
          fi

      - name: Bump to next minor version
        run: |
          RELEASED_VERSION="${{ steps.get_version.outputs.released_version }}"

          # Calculate next minor version
          IFS='.' read -r major minor patch <<< "$RELEASED_VERSION"
          NEXT_VERSION="$major.$((minor + 1)).0"

          echo "Released: $RELEASED_VERSION"
          echo "Next version for main: $NEXT_VERSION-next.0"

          # Update package.json
          npm version "$NEXT_VERSION-next.0" --no-git-tag-version

          # Commit and push
          git add package.json
          git commit -m "chore: bump version to $NEXT_VERSION-next.0 after $RELEASED_VERSION release [skip ci]"
          git push origin main
