name: ðŸŽ¯ Create Release Branch

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (leave empty for auto-increment)'
        required: false
        type: string

permissions:
  contents: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_PAT }}
          fetch-depth: 0

      - name: Setup Git
        run: |
          git config --global user.name "github-actions[bot]"
          git config --global user.email "github-actions[bot]@users.noreply.github.com"

      - name: Determine version
        id: version
        run: |
          if [ -n "${{ inputs.version }}" ]; then
            VERSION="${{ inputs.version }}"
          else
            # Get current version from package.json
            CURRENT=$(node -p "require('./package.json').version")
            # Remove prerelease suffix if present (e.g., 0.3.0-next.1 -> 0.3.0)
            BASE_VERSION=${CURRENT%%-*}
            # Extract major.minor
            IFS='.' read -r major minor patch <<< "$BASE_VERSION"
            VERSION="$major.$minor"
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      - name: Create release branch
        run: |
          BRANCH="release/v${{ steps.version.outputs.version }}"

          # Fetch all tags to ensure we have everything
          git fetch --all --tags

          # Get the last stable release tag
          LAST_STABLE=$(git tag -l "v*.*.0" --sort=-v:refname | grep -v "next" | head -1)
          echo "Last stable release: $LAST_STABLE"

          # Create branch from main
          git checkout -b "$BRANCH"

          # Merge the last stable release tag to include it in history
          # This ensures semantic-release knows about previous releases
          if [ -n "$LAST_STABLE" ]; then
            echo "Merging $LAST_STABLE into release branch history"
            git merge --allow-unrelated-histories --no-commit $LAST_STABLE || true
            git reset HEAD
          fi

          # Get the full version from package.json and clean it
          CURRENT=$(node -p "require('./package.json').version")
          BASE_VERSION=${CURRENT%%-*}  # Remove -next.X suffix

          # Update package.json to the clean version (e.g., 0.3.0)
          npm version $BASE_VERSION --no-git-tag-version --allow-same-version

          # Commit the cleaned version
          git add package.json
          git commit -m "chore: prepare stable release v$BASE_VERSION"

          git push origin "$BRANCH"

          echo "âœ… Created $BRANCH from main with version $BASE_VERSION"
          echo "The stable release workflow will trigger automatically."
